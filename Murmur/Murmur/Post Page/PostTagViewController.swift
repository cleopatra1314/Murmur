//
//  PostTagViewController.swift
//  Murmur
//
//  Created by cleopatra on 2023/6/18.
//

import Foundation
import UIKit
import FirebaseFirestore
import FirebaseStorage
import SnapKit

class PostTagViewController: UIViewController {
    
    var MWtagArray = ["üçú Food","üé® Art", "üëæ Pet", "üßçüèª‚Äç‚ôÄÔ∏è Her", "üßçüèª‚Äç‚ôÇÔ∏è Him", "‚òïÔ∏è Coffee", "‚ùì Mystery", "ü•≥ Happy", "üò† Angry", "ü•≤ Sad", "üòñ Anxious", "ü•± Tired", "ü§î Mood", "üè≥Ô∏è‚Äçüåà LGBTQ", "üö∂üèª‚Äç‚ôÄÔ∏è Nomad", "üå≤ Plant", "üßó Climbing", "ü•æ Hiking", "üõ£Ô∏è Road-Trip", "üèçÔ∏è Motorcycle", "üõçÔ∏è Shopping", "üòÜ Entertainment", "üë©üèª‚Äçü§ù‚Äçüë®üèº Friends", "ü•® Philodophy", "üßã Drinks", "üçø Movies", "üç∞ Desserts", "üß≥ Travel", "üèòÔ∏è City", "üèØ Temple", "üó£Ô∏è Politics", "üíí Religion", "üî¥ Red", "üü† Orange", "üîµ Blue", "üü° Yellow", "üü¢ Green", "üü£ Purple", "‚ö™Ô∏è White", "‚ö´Ô∏è Black"] {
        didSet {
            postTagCollectionView.reloadData()
        }
    }
    var selectedTagArray = ["üö• Street"] {
        didSet {
            postTagCollectionView.reloadData()
        }
    }
    
    var uploadImage: UIImage?

//    private let titleLabel: UILabel = {
//        let titleLabel = UILabel()
//        return titleLabel
//    }()
//    private let selectedTagStack: UICollectionView = {
//        let selectedTagStack = UICollectionView()
//        return selectedTagStack
//    }()
//    private let numberOfTagLabel: UILabel = {
//        let numberOfTagLabel = UILabel()
//        return numberOfTagLabel
//    }()
    lazy var postTagCollectionView: UICollectionView = {
//        let layout = UICollectionViewFlowLayout()
        let layout = TagCollectionViewFlowLayout()
        // section ÁöÑÈñìË∑ù
//        layout.sectionInset = UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5)
        // ÊØèË°å cell ÈñìË∑ù
        layout.minimumLineSpacing = 12
        // cell ‰πãÈñìÈñìË∑ù
        layout.minimumInteritemSpacing = 8
        // cell Èï∑ÂØ¨
        //        layout.itemSize = CGSize(width: 100, height: 30)
        // ÊªëÂãïÁöÑÊñπÂêë
        layout.scrollDirection = .vertical
        // ‰ª• auto layout Ë®àÁÆó cell Â§ßÂ∞è
        layout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
        
        // collectionView frameË®≠ÂÆö x,y,ÂØ¨,È´ò
        let postTagCollectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout)
        // ËÉåÊôØÈ°èËâ≤
        postTagCollectionView.backgroundColor = .PrimaryLighter
        // items Èù†Âè≥
//        postTagCollectionView.semanticContentAttribute = UISemanticContentAttribute.forceRightToLeft
//        layout.headerReferenceSize = CGSize(width: 0, height: 180)
        layout.sectionHeadersPinToVisibleBounds = false
        
        // ‰Ω†ÊâÄË®ªÂÜäÁöÑcell
        postTagCollectionView.register(PostTagCollectionReusableHeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "\(PostTagCollectionReusableHeaderView.self)")
        postTagCollectionView.register(PostTagCollectionReusableFooterView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "\(PostTagCollectionReusableFooterView.self)")
        postTagCollectionView.register(SelectedTagCollectionViewCell.self, forCellWithReuseIdentifier: "\(SelectedTagCollectionViewCell.self)")
        postTagCollectionView.register(TagCollectionViewCell.self, forCellWithReuseIdentifier: "\(TagCollectionViewCell.self)")
        
        postTagCollectionView.delegate = self
        postTagCollectionView.dataSource = self
        
        return postTagCollectionView
    }()
    var murmurData: [String: Any] = [
        "userUID": currentUserUID,
//        "location": ["latitude": nil, "longitude": nil],
        "location": [String: Double](),
        "murmurMessage": [String](),
        "murmurImage": String(),
        "selectedTags": [String](),
        "createTime": Timestamp(date: Date())
        ]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.backgroundColor = .PrimaryLight
        setNav()
        layoutView()
        
        
//        postTagCollectionView.collectionViewLayout = generateLayout()
 
    }
    
//    func generateLayout() -> UICollectionViewLayout {
//            let fraction: CGFloat = 1 / 3
//            let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(fraction), heightDimension: .fractionalHeight(1))
//            let item = NSCollectionLayoutItem(layoutSize: itemSize)
//            let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalWidth(fraction))
//            let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])
            
//            let section = NSCollectionLayoutSection(group: group)
//            let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(100))
//            let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: headerSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)
//            section.boundarySupplementaryItems = [header]
//            let layout = UICollectionViewCompositionalLayout(section: section)
//            return layout
//        }
    
    func layoutView() {
        
        self.view.addSubview(postTagCollectionView)
        postTagCollectionView.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide)
            make.leading.trailing.bottom.equalTo(self.view)
        }
        
    }
    
    // MARK: ‰∏äÂÇ≥Âà∞ firestorage
//    func uploadPhoto(image: UIImage?, completion: @escaping (Result<URL, Error>) -> Void) {
//
//            guard let image else { return }
//            let fileReference = Storage.storage().reference().child(UUID().uuidString + ".jpg")
//            if let data = image.jpegData(compressionQuality: 0.9) {
//
//                fileReference.putData(data, metadata: nil) { result in
//                    switch result {
//                    case .success:
//                         fileReference.downloadURL(completion: completion)
//                    case .failure(let error):
//                        completion(.failure(error))
//                    }
//                }
//            }
//    }
    
    private func setNav() {

        self.navigationItem.title = "Â°óÈ¥âÊ®ôÁ±§"
        
        let backButtonItem = UIBarButtonItem(image: UIImage(systemName: "chevron.backward"), style: .plain, target: self, action: #selector(backButtonItemTouchUpInside))
        backButtonItem.tintColor = .SecondaryShine
        navigationItem.leftBarButtonItem = backButtonItem
        
        let postButtonItem = UIBarButtonItem(title: "Post", style: .plain, target: self, action: #selector(postButtonItemTouchUpInside))
        postButtonItem.setTitleTextAttributes([NSAttributedString.Key.kern: 0, .font: UIFont.systemFont(ofSize: 18, weight: .medium)], for: .normal)
        postButtonItem.tintColor = .white
        navigationItem.rightBarButtonItem = postButtonItem
    }
    
    @objc func backButtonItemTouchUpInside() {
        self.navigationController?.popViewController(animated: true)
    }
    
    @objc func postButtonItemTouchUpInside() {
//        ÈåØË™§ÂØ´Ê≥ï
//        self.navigationController?.pushViewController(<#T##viewController: UIViewController##UIViewController#>, animated: <#T##Bool#>)
//        self.navigationController?.popToViewController((self.tabBarController?.viewControllers![0])!, animated: true)
//        present((self.tabBarController?.viewControllers![0])!, animated: true)
        
        guard let postVC = self.navigationController?.viewControllers.first as? PostViewController else {
            print("Error: self.navigationController?.viewControllers.first can't transform to PostViewController")
            return
        }
        postVC.murmurTextField.text = ""
        postVC.murmurView.isHidden = false
        postVC.murmurImageView.isHidden = true
        
        // Create data to firebase: ÁõÆÂâçÊâÄÂú®Â∫ßÊ®ô„ÄÅÂ°óÈ¥âÁïôË®Ä„ÄÅÁÖßÁâá„ÄÅ3ÂÄã selected tags„ÄÅÁî®Êà∂id
        let homeVC = self.tabBarController?.viewControllers![0] as? HomePageViewController
        homeVC?.switchModeButton.setImage(UIImage(named: "Icons_People"), for: .normal)
        homeVC?.nearbyUsersContainerView.isHidden = true
        homeVC?.locationMessageContainerView.isHidden = false
        homeVC?.switchMode = true

        // Â∞Ü location Âº∫Âà∂ËΩ¨Êç¢‰∏∫ [String: Double] Á±ªÂûã
        if var location = murmurData["location"] as? [String: Double] {
            location["latitude"] = currentCoordinate?.latitude
            location["longitude"] = currentCoordinate?.longitude
            murmurData["location"] = location
        }

        uploadPhoto(image: uploadImage) { [self] result in
            switch result {
            case .success(let url):
                
                let selectedImageUrlString = url.absoluteString
                
                murmurData["murmurImage"] = selectedImageUrlString
                murmurData["selectedTags"] = selectedTagArray
                
                createMurmur()
                
            case .failure(let error):
                print(error)
            }
        }
        
        self.view.makeToast("ÊàêÂäüÁôºÂ∏É Murmur", duration: 2, position: .center) { didTap in
            
            self.tabBarController?.selectedIndex = 0
            self.navigationController?.popToRootViewController(animated: true)
            
        }
        
        
//        self.navigationController?.popToRootViewController(animated: true)
//        let postVC2 = self.navigationController?.popToRootViewController as? PostViewController
        
        
        
        
        
    }
    
    func createMurmur() {
        
        // Âú®Á∏Ω murmurTest Êñ∞Â¢ûË≥áÊñô
        let documentReference = database.collection("murmurTest").document()
        documentReference.setData(murmurData)
        
        // Âú®ÁõÆÂâçÁî®Êà∂ÁöÑ postedMurmur Êñ∞Â¢ûË≥áÊñô
        database.collection("userTest").document(currentUserUID).collection("postedMurmurs").document(documentReference.documentID).setData(murmurData)
        
    }
    
    
    
}

extension PostTagViewController: UICollectionViewDelegate, UICollectionViewDataSource {
   
    func numberOfSections(in collectionView: UICollectionView) -> Int {
            return 2
        }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if section == 0 {
            return selectedTagArray.count
            
        } else {
            return MWtagArray.count
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        if kind == UICollectionView.elementKindSectionHeader {
            guard let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "\(PostTagCollectionReusableHeaderView.self)", for: indexPath) as? PostTagCollectionReusableHeaderView else { return UICollectionReusableView() }
            headerView.label.text = "‰Ω†ÁöÑÂ°óÈ¥âÂÖßÂÆπËàá‰ªÄÈ∫ºÊúâÈóúÂë¢Ôºü"  //"About your murmurs"
//                        headerView.frame = CGRect(x: 0, y: 0, width: collectionView.frame.width, height: 50)
            return headerView
            
        } else if kind == UICollectionView.elementKindSectionFooter {
            guard let footerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "\(PostTagCollectionReusableFooterView.self)", for: indexPath) as? PostTagCollectionReusableFooterView else { return UICollectionReusableView() }
            footerView.label.text = "\(selectedTagArray.count) / 5 (At least one)"
            
            return footerView
            
        } else {
            return UICollectionReusableView()
        }

    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if indexPath.section == 0 {
            
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "\(SelectedTagCollectionViewCell.self)", for: indexPath) as? SelectedTagCollectionViewCell else { return SelectedTagCollectionViewCell()}
            cell.titleLabel.text = selectedTagArray[indexPath.row]
            cell.layoutSubviews()
            
            return cell
            
        } else if indexPath.section == 1 {
            
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "\(TagCollectionViewCell.self)", for: indexPath) as? TagCollectionViewCell else { return TagCollectionViewCell()}
            cell.titleLabel.text = MWtagArray[indexPath.row]
            cell.layoutSubviews()
            
            return cell
            
        } else {
            return UICollectionViewCell()
            
        }
        
    }
    
    // Ë™øÊï¥ Header Â∞∫ÂØ∏
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        if section == 0 {
//            let headerView = PostTagCollectionReusableHeaderView() // ÂâµÂª∫‰∏ÄÂÄãÊö´ÊôÇÁöÑ headerView
//            // Ë®≠ÂÆö headerView ÁöÑÂÖßÂÆπ
//            headerView.label.text = "‰Ω†ÁöÑÂ°óÈ¥âÂÖßÂÆπË∑ü‰ªÄÈ∫ºÊúâÈóúÂë¢Ôºü"  //"About your murmurs"
////            headerView.label.font = .systemFont(ofSize: 28)
////            headerView.translatesAutoresizingMaskIntoConstraints = false
////             Ê†πÊìöÂÖßÂÆπË®àÁÆóÂãïÊÖãÂ§ßÂ∞è
//            let fittingSize = CGSize(width: collectionView.frame.width, height: UIView.layoutFittingCompressedSize.height)
//            let size = headerView.systemLayoutSizeFitting(fittingSize, withHorizontalFittingPriority: .required, verticalFittingPriority: .fittingSizeLevel)
//            return size
            
            // selectedTag ÂçÄ
            return CGSize(width: 0, height: 80)
            
        } else {
            return .zero
        }
    }
    
    // Ë™øÊï¥ Footer Â∞∫ÂØ∏
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        if section == 0 {
            let footerView = PostTagCollectionReusableFooterView() // ÂâµÂª∫‰∏ÄÂÄãÊö´ÊôÇÁöÑ headerView
            // Ë®≠ÂÆö headerView ÁöÑÂÖßÂÆπ
            footerView.label.text = "1 / 5 (At least 1)"
//            footerView.label.font = .systemFont(ofSize: 28)
//            footerView.translatesAutoresizingMaskIntoConstraints = false
            // Ê†πÊìöÂÖßÂÆπË®àÁÆóÂãïÊÖãÂ§ßÂ∞è
            let fittingSize = CGSize(width: collectionView.frame.width, height: UIView.layoutFittingCompressedSize.height)
            let size = footerView.systemLayoutSizeFitting(fittingSize, withHorizontalFittingPriority: .required, verticalFittingPriority: .fittingSizeLevel)
            return size
//            return CGSize(width: view.frame.size.width, height: view.frame.size.width / 5)
        } else {
            return .zero
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        if indexPath.section == 0 {
            let disSelectedtag = selectedTagArray.remove(at: indexPath.row)
            MWtagArray.insert(disSelectedtag, at: 0)
            
        } else if indexPath.section == 1 {
            
            if selectedTagArray.count >= 5 {
                return
            }
            let selectedtag = MWtagArray.remove(at: indexPath.row)
            selectedTagArray.append(selectedtag)
            
        } else {
            print("Error: Êú™Áü•ÁöÑ section")
        }
    }
        
}

extension PostTagViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        if section == 0 {
            return UIEdgeInsets(top: 16, left: 0, bottom: 4, right: 16)
        } else {
            return UIEdgeInsets(top: 24, left: 0, bottom: 0, right: 16)
        }

    }
    
    

}

